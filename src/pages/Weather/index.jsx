import { useState } from "react";
import { Link } from "react-router-dom";
import styles from "./Weather.module.scss";

const weatherTypes = [
  { weather: "N·∫Øng", icon: "‚òÄÔ∏è" },
  { weather: "N·∫Øng g·∫Øt", icon: "üåû" },
  { weather: "N·∫Øng d·ªãu", icon: "üåÖ" },
  { weather: "N·∫Øng n√≥ng k·ª∑ l·ª•c", icon: "üî•" },

  { weather: "C√≥ m√¢y", icon: "üå§Ô∏è" },
  { weather: "Nhi·ªÅu m√¢y", icon: "‚òÅÔ∏è" },
  { weather: "M√¢y r·∫£i r√°c", icon: "‚õÖ" },
  { weather: "Tr·ªùi u √°m", icon: "üå•Ô∏è" },

  { weather: "M∆∞a nh·∫π", icon: "üå¶Ô∏è" },
  { weather: "M∆∞a v·ª´a", icon: "üåßÔ∏è" },
  { weather: "M∆∞a to", icon: "üå®Ô∏è" },
  { weather: "M∆∞a ph√πn", icon: "üíß" },
  { weather: "M∆∞a r√†o", icon: "üå¶Ô∏è" },
  { weather: "M∆∞a ƒë√°", icon: "üßä" },

  { weather: "Gi√¥ng b√£o", icon: "‚õàÔ∏è" },
  { weather: "S·∫•m s√©t", icon: "‚ö°" },
  { weather: "B√£o nhi·ªát ƒë·ªõi", icon: "üåÄ" },
  { weather: "L·ªëc xo√°y", icon: "üå™Ô∏è" },

  { weather: "Tuy·∫øt", icon: "‚ùÑÔ∏è" },
  { weather: "Tuy·∫øt r∆°i nh·∫π", icon: "üå®Ô∏è" },
  { weather: "B√£o tuy·∫øt", icon: "üå¨Ô∏è" },
  { weather: "S∆∞∆°ng gi√°", icon: "ü•∂" },
];

const regions = {
  "ƒê·ªìng b·∫±ng s√¥ng H·ªìng": [
    "H√† N·ªôi",
    "Vƒ©nh Ph√∫c",
    "B·∫Øc Ninh",
    "Qu·∫£ng Ninh",
    "H·∫£i D∆∞∆°ng",
    "H·∫£i Ph√≤ng",
    "H∆∞ng Y√™n",
    "Th√°i B√¨nh",
    "H√† Nam",
    "Nam ƒê·ªãnh",
    "Ninh B√¨nh",
  ],
  "Trung du mi·ªÅn n√∫i ph√≠a B·∫Øc": [
    "H√† Giang",
    "Cao B·∫±ng",
    "B·∫Øc K·∫°n",
    "Tuy√™n Quang",
    "L√†o Cai",
    "Y√™n B√°i",
    "Th√°i Nguy√™n",
    "L·∫°ng S∆°n",
    "B·∫Øc Giang",
    "Ph√∫ Th·ªç",
    "ƒêi·ªán Bi√™n",
    "Lai Ch√¢u",
    "S∆°n La",
    "Ho√† B√¨nh",
  ],
  "Mi·ªÅn Trung": [
    "Thanh Ho√°",
    "Ngh·ªá An",
    "H√† Tƒ©nh",
    "Qu·∫£ng B√¨nh",
    "Qu·∫£ng Tr·ªã",
    "Th·ª´a Thi√™n Hu·∫ø",
    "ƒê√† N·∫µng",
    "Qu·∫£ng Nam",
    "Qu·∫£ng Ng√£i",
    "B√¨nh ƒê·ªãnh",
    "Ph√∫ Y√™n",
    "Kh√°nh Ho√†",
    "Ninh Thu·∫≠n",
    "B√¨nh Thu·∫≠n",
  ],
  "T√¢y Nguy√™n": ["Kon Tum", "Gia Lai", "ƒê·∫Øk L·∫Øk", "ƒê·∫Øk N√¥ng", "L√¢m ƒê·ªìng"],
  "ƒê√¥ng Nam B·ªô": [
    "B√¨nh Ph∆∞·ªõc",
    "T√¢y Ninh",
    "B√¨nh D∆∞∆°ng",
    "ƒê·ªìng Nai",
    "B√† R·ªãa - V≈©ng T√†u",
    "TP.HCM",
  ],
  "ƒê·ªìng b·∫±ng s√¥ng C·ª≠u Long": [
    "Long An",
    "Ti·ªÅn Giang",
    "B·∫øn Tre",
    "Tr√† Vinh",
    "Vƒ©nh Long",
    "ƒê·ªìng Th√°p",
    "An Giang",
    "Ki√™n Giang",
    "C·∫ßn Th∆°",
    "H·∫≠u Giang",
    "S√≥c TrƒÉng",
    "B·∫°c Li√™u",
    "C√† Mau",
  ],
};

const allCities = [].concat(...Object.values(regions));
const weatherDataInit = {};
allCities.forEach((city) => {
  const randomType = weatherTypes[Math.floor(Math.random() * weatherTypes.length)];
  weatherDataInit[city] = {
    city,
    temp: Math.floor(Math.random() * 35) + 5,
    humidity: Math.floor(Math.random() * 101),
    weather: randomType.weather,
    icon: randomType.icon,
  };
});

function mostFrequentWeather(cities, data) {
  const count = {};
  cities.forEach((city) => {
    const w = data[city].weather;
    count[w] = (count[w] || 0) + 1;
  });
  const maxCount = Math.max(...Object.values(count));
  const candidates = Object.keys(count).filter((k) => count[k] === maxCount);
  const chosen = candidates[Math.floor(Math.random() * candidates.length)];
  const icon = data[cities.find((c) => data[c].weather === chosen)].icon;
  return { icon, weather: chosen };
}

function RegionCard({ regionName, cities, weatherData, setWeatherData }) {
  const [selectedCity, setSelectedCity] = useState("all");
  const handleChange = (e) => setSelectedCity(e.target.value);
  const handleRefresh = () => {
    const city = selectedCity === "all" ? cities[Math.floor(Math.random() * cities.length)] : selectedCity;
    setWeatherData((prev) => {
      const newData = { ...prev };
      const randomType = weatherTypes[Math.floor(Math.random() * weatherTypes.length)];
      newData[city] = {
        ...newData[city],
        temp: Math.floor(Math.random() * 35) + 5,
        humidity: Math.floor(Math.random() * 101),
        weather: randomType.weather,
        icon: randomType.icon,
      };
      return newData;
    });
  };

  const { icon, weather } = mostFrequentWeather(cities, weatherData);
  const displayData =
    selectedCity === "all"
      ? {
          temp: Math.round(cities.reduce((sum, c) => sum + weatherData[c].temp, 0) / cities.length),
          humidity: Math.round(
            cities.reduce((sum, c) => sum + weatherData[c].humidity, 0) / cities.length
          ),
          icon,
          weather,
        }
      : weatherData[selectedCity];

  return (
    <div className={styles.card}>
      <h2>{regionName}</h2>
      <select value={selectedCity} onChange={handleChange}>
        <option value="all">To√†n khu v·ª±c</option>
        {cities.map((city) => (
          <option key={city} value={city}>
            {city}
          </option>
        ))}
      </select>
      <div className={styles.emoji}>{displayData.icon}</div>
      <div className={styles.info}>
        <strong>{selectedCity === "all" ? "To√†n khu v·ª±c" : displayData.city}</strong>
      </div>
      <div>Nhi·ªát ƒë·ªô: {displayData.temp}¬∞C</div>
      <div>ƒê·ªô ·∫©m: {displayData.humidity}%</div>
      <div>Th·ªùi ti·∫øt: {displayData.weather}</div>
      <button onClick={handleRefresh}>L√†m m·ªõi</button>
    </div>
  );
}

function Weather() {
  const [weatherData, setWeatherData] = useState(weatherDataInit);
  return (
    <div className={styles.root}>
      <div className={styles.topBar}>
        <Link to="/" className={styles.homeBtn}>
          <i className="fa-solid fa-house"></i>
          <span> Home</span>
        </Link>
      </div>
      {Object.keys(regions).map((region) => (
        <RegionCard
          key={region}
          regionName={region}
          cities={regions[region]}
          weatherData={weatherData}
          setWeatherData={setWeatherData}
        />
      ))}
    </div>
  );
}

export default Weather;


